import React, { useState, useEffect } from 'react';
import orderService from '../../services/orderService';
import accountService from '../../services/accountService'; // Import accountService
import './OrderPage.css';

const OrderPage = () => {
  // State qu·∫£n l√Ω form
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    address: '',
    paymentMethod: 'COD',
    note: ''
  });

  // State qu·∫£n l√Ω UI
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [cartItems, setCartItems] = useState([]);
  const [shippingMethods, setShippingMethods] = useState([]);
  const [selectedShipping, setSelectedShipping] = useState(1); // M·∫∑c ƒë·ªãnh ID = 1 (Giao h√†ng nhanh)

  // FIX: S·ª≠ d·ª•ng accountService ƒë·ªÉ l·∫•y th√¥ng tin user
  const userInfo = accountService.getCurrentUser() || {};
  const userId = accountService.getUserId();

  // Debug: Log ƒë·ªÉ ki·ªÉm tra
  console.log('UserInfo:', userInfo);
  console.log('UserId:', userId);
  console.log('Is authenticated:', accountService.isAuthenticated());

  // T√≠nh to√°n gi√° tr·ªã
  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const shippingFee = shippingMethods.find(method => method.id === selectedShipping)?.price || 
                     shippingMethods.find(method => method.shippingMethodID === selectedShipping)?.shippingPrice || 
                     20000; // Fallback to default price
  const total = subtotal + shippingFee;

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      // Load gi·ªè h√†ng t·ª´ localStorage
      const savedCart = JSON.parse(localStorage.getItem('cartItems') || '[]');
      setCartItems(savedCart);

      // Load ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
      const shippingResponse = await orderService.getShippingMethods();
      if (shippingResponse.success) {
        setShippingMethods(shippingResponse.data);
      } else {
        // Fallback data n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
        setShippingMethods([
          { shippingMethodID: 1, name: 'Giao h√†ng nhanh', shippingPrice: 20000, isDeleted: 0 },
          { shippingMethodID: 2, name: 'Giao h√†ng h·ªèa t·ªëc', shippingPrice: 50000, isDeleted: 0 }
        ]);
      }

      // Pre-fill th√¥ng tin user n·∫øu c√≥
      if (userInfo.name) setFormData(prev => ({ ...prev, fullName: userInfo.name }));
      if (userInfo.email) setFormData(prev => ({ ...prev, email: userInfo.email }));
      if (userInfo.phone) setFormData(prev => ({ ...prev, phone: userInfo.phone }));
    } catch (error) {
      console.error('Error loading initial data:', error);
      // Fallback data n·∫øu c√≥ l·ªói
      setShippingMethods([
        { shippingMethodID: 1, name: 'Giao h√†ng nhanh', shippingPrice: 20000, isDeleted: 0 },
        { shippingMethodID: 2, name: 'Giao h√†ng h·ªèa t·ªëc', shippingPrice: 50000, isDeleted: 0 }
      ]);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error khi user b·∫Øt ƒë·∫ßu nh·∫≠p
    if (error) setError('');
  };

  const handleShippingChange = (e) => {
    setSelectedShipping(parseInt(e.target.value));
  };

  const validateForm = () => {
    if (!formData.fullName.trim()) {
      setError('Vui l√≤ng nh·∫≠p h·ªç t√™n');
      return false;
    }
    if (!formData.phone.trim()) {
      setError('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
      return false;
    }
    if (!formData.email.trim()) {
      setError('Vui l√≤ng nh·∫≠p email');
      return false;
    }
    if (!formData.address.trim()) {
      setError('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng');
      return false;
    }
    if (cartItems.length === 0) {
      setError('Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi ƒë·∫∑t h√†ng');
      return false;
    }
    // FIX: Ki·ªÉm tra authentication t·ªët h∆°n
    if (!userId || !accountService.isAuthenticated()) {
      setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c');
      return false;
    }
    return true;
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const orderData = {
        userID: userId,
        address: formData.address,
        paymentMethod: formData.paymentMethod,
        shippingMethodID: selectedShipping,
        total: total,
        orderDetails: cartItems.map(item => ({
          productItemID: item.id || item.productItemID,
          quantity: item.quantity,
          price: item.price
        }))
      };

      console.log('Order data:', orderData); // Debug

      const response = await orderService.createOrder(orderData);

      if (response.success) {
        // Clear gi·ªè h√†ng ngay l·∫≠p t·ª©c
        localStorage.removeItem('cartItems');
        setCartItems([]);
        
        // Reset form
        setFormData({
          fullName: userInfo.name || '',
          phone: userInfo.phone || '',
          email: userInfo.email || '',
          address: '',
          paymentMethod: 'COD',
          note: ''
        });

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† chuy·ªÉn h∆∞·ªõng ngay l·∫≠p t·ª©c
        setSuccess('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
        
        // Chuy·ªÉn h∆∞·ªõng ngay l·∫≠p t·ª©c thay v√¨ ch·ªù timeout
        window.location.href = '/purchase-orders'; 
      } else {
        setError(response.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
      }
    } catch (error) {
      setError('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Order submission error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="order-page">
      <h1 className="page-title">Thanh To√°n</h1>

      {cartItems.length === 0 ? (
        <div className="empty-cart">
          <div className="empty-cart-icon">üõí</div>
          <h2>Gi·ªè h√†ng tr·ªëng</h2>
          <p>Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n</p>
        </div>
      ) : (
        <div className="order-container">
          <form className="order-form" onSubmit={handleSubmit}>
            {error && <div className="error-message">{error}</div>}
            {success && <div className="success-message">{success}</div>}

            {/* Th√¥ng tin giao h√†ng */}
            <div className="form-section">
              <h2 className="section-title">Th√¥ng tin giao h√†ng</h2>
              
              <div className="form-group">
                <label className="form-label">H·ªç v√† t√™n *</label>
                <input
                  type="text"
                  name="fullName"
                  value={formData.fullName}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">S·ªë ƒëi·ªán tho·∫°i *</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">Email *</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">ƒê·ªãa ch·ªâ giao h√†ng *</label>
                <textarea
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                  className="form-textarea"
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt (s·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë)"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">Ghi ch√∫ ƒë∆°n h√†ng</label>
                <textarea
                  name="note"
                  value={formData.note}
                  onChange={handleInputChange}
                  className="form-textarea"
                  placeholder="Ghi ch√∫ th√™m cho ƒë∆°n h√†ng (t√πy ch·ªçn)"
                  rows="3"
                />
              </div>
            </div>

            {/* Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn */}
            <div className="form-section">
              <h2 className="section-title">Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn</h2>
              
              <div className="shipping-methods">
                {shippingMethods
                  .filter(method => method.isDeleted === 0)
                  .map((method) => (
                  <div key={method.shippingMethodID || method.id} className={`shipping-option ${selectedShipping === (method.shippingMethodID || method.id) ? 'selected' : ''}`}>
                    <input
                      type="radio"
                      id={`shipping-${method.shippingMethodID || method.id}`}
                      name="shippingMethod"
                      value={method.shippingMethodID || method.id}
                      checked={selectedShipping === (method.shippingMethodID || method.id)}
                      onChange={handleShippingChange}
                      className="shipping-radio"
                    />
                    <label htmlFor={`shipping-${method.shippingMethodID || method.id}`} className="shipping-label">
                      <div className="shipping-name">{method.name}</div>
                      <div className="shipping-price">{formatCurrency(method.shippingPrice || method.price)}</div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
            <div className="form-section">
              <h2 className="section-title">Ph∆∞∆°ng th·ª©c thanh to√°n</h2>
              
              <div className="payment-methods">
                <div className={`payment-option ${formData.paymentMethod === 'COD' ? 'selected' : ''}`}>
                  <input
                    type="radio"
                    id="cod"
                    name="paymentMethod"
                    value="COD"
                    checked={formData.paymentMethod === 'COD'}
                    onChange={handleInputChange}
                    className="payment-radio"
                  />
                  <label htmlFor="cod" className="payment-label">
                    Thanh to√°n khi nh·∫≠n h√†ng (COD)
                  </label>
                </div>

                <div className={`payment-option ${formData.paymentMethod === 'Banking' ? 'selected' : ''}`}>
                  <input
                    type="radio"
                    id="banking"
                    name="paymentMethod"
                    value="Banking"
                    checked={formData.paymentMethod === 'Banking'}
                    onChange={handleInputChange}
                    className="payment-radio"
                  />
                  <label htmlFor="banking" className="payment-label">
                    Chuy·ªÉn kho·∫£n ng√¢n h√†ng
                  </label>
                </div>

                <div className={`payment-option ${formData.paymentMethod === 'EWallet' ? 'selected' : ''}`}>
                  <input
                    type="radio"
                    id="ewallet"
                    name="paymentMethod"
                    value="EWallet"
                    checked={formData.paymentMethod === 'EWallet'}
                    onChange={handleInputChange}
                    className="payment-radio"
                  />
                  <label htmlFor="ewallet" className="payment-label">
                    V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)
                  </label>
                </div>
              </div>
            </div>

            <button 
              type="submit" 
              className="submit-button"
              disabled={loading}
            >
              {loading && <span className="loading-spinner"></span>}
              {loading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t h√†ng'}
            </button>
          </form>

          {/* T√≥m t·∫Øt ƒë∆°n h√†ng */}
          <div className="order-summary">
            <h2 className="summary-title">T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
            
            <div className="cart-items">
              {cartItems.map((item, index) => (
                <div key={index} className="cart-item">
                  <div className="item-info">
                    <div className="item-name">{item.name || item.productName}</div>
                    <div className="item-details">
                      S·ªë l∆∞·ª£ng: {item.quantity} √ó {formatCurrency(item.price)}
                    </div>
                  </div>
                  <div className="item-total">
                    {formatCurrency(item.price * item.quantity)}
                  </div>
                </div>
              ))}
            </div>

            <div className="summary-row">
              <span className="summary-label">T·∫°m t√≠nh:</span>
              <span className="summary-value">{formatCurrency(subtotal)}</span>
            </div>

            <div className="summary-row">
              <span className="summary-label">Ph√≠ v·∫≠n chuy·ªÉn:</span>
              <span className="summary-value">{formatCurrency(shippingFee)}</span>
            </div>

            <div className="summary-row total-row">
              <span className="summary-label">T·ªïng c·ªông:</span>
              <span className="summary-value">{formatCurrency(total)}</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OrderPage;